@startuml
skinparam linetype ortho
top to bottom direction

!define VALIDATORS QueryParamValidator, HeaderParamValidator, PathParamValidator, BodyValidator, MethodValidator, JsonValidator, BaseValidator
!define OAS_CLASSES OASValidator, OASValidatorImp, ValidatorsStore, OASValidatorException

' Classes
class OASValidator {
	+OASValidator(const string& spec_path)
	+~OASValidator()
	-impl_ : OASValidatorImp*
	+ValidateBody(const string& method, const string& http_path, const string& json_body, string& error_msg) : int
	+ValidateHeaders(const string& method, const string& http_path, const unordered_map<string, string>& headers, string& error_msg) : int
	+ValidatePathParam(const string& method, const string& http_path, string& error_msg) : int
	+ValidateQueryParam(const string& method, const string& http_path, string& error_msg) : int
	+ValidateRequest(const string& method, const string& http_path, string& error_msg) : int
	+ValidateRequest(const string& method, const string& http_path, const string& json_body, string& error_msg) : int
	+ValidateRequest(const string& method, const string& http_path, const unordered_map<string, string>& headers, string& error_msg) : int
	+ValidateRequest(const string& method, const string& http_path, const string& json_body, const unordered_map<string, string>& headers, string& error_msg) : int
	+ValidateRoute(const string& method, const string& http_path, string& error_msg) : int
}

class OASValidatorException {
    +OASValidatorException(string message)
    +what() : char* {query}
    -ex_msg_ : string
}


class OASValidatorImp {
    +OASValidatorImp(const string& specs_path)
    +~OASValidatorImp()
    -method_validator_ : MethodValidator
    -GetValidators(const string& method, const string& http_path, ValidatorsStore*& validators, string& error_msg, unordered_map<size_t, ParamRange>* param_idxs, string* query) : ValidationError
    +ValidateBody(const string& method, const string& http_path, const string& json_body, string& error_msg) : ValidationError
    +ValidateHeaders(const string& method, const string& http_path, const unordered_map<string, string>& headers, string& error_msg) : ValidationError
    +ValidatePathParam(const string& method, const string& http_path, string& error_msg) : ValidationError
    +ValidateQueryParam(const string& method, const string& http_path, string& error_msg) : ValidationError
    +ValidateRequest(const string& method, const string& http_path, string& error_msg) : ValidationError
    +ValidateRequest(const string& method, const string& http_path, const string& json_body, string& error_msg) : ValidationError
    +ValidateRequest(const string& method, const string& http_path, const unordered_map<string, string>& headers, string& error_msg) : ValidationError
    +ValidateRequest(const string& method, const string& http_path, const string& json_body, const unordered_map<string, string>& headers, string& error_msg) : ValidationError
    +ValidateRoute(const string& method, const string& http_path, string& error_msg) : ValidationError
    -{static} kStringToMethod : static const unordered_map<string, HttpMethod>
    -oas_validators_ : array<PerMethod, METHOD_COUNT>
}
class PathTrie {
        +PathTrie()
        +~PathTrie()
        -root_ : Node
        +Search(const char* beg, const char* end, string& oas_path) : bool
        +Search(const char* beg, const char* end, string& oas_path, unordered_map<size_t, ParamRange>& param_idxs) : bool
        -DeleteNode(Node node) : void
        +Insert(const string& path) : void
    }
class ValidatorsStore {
    +ValidatorsStore()
    +ValidatorsStore(const Value& schema_val, const vector<string>& ref_keys)
    +~ValidatorsStore()
    -body_validator_ : BodyValidator*
    +ValidateBody(const string& json_body, string& error_msg) : ValidationError
    +ValidateHeaderParams(const unordered_map<string, string>& headers, string& error_msg) : ValidationError
    +ValidatePathParams(unordered_map<size_t, ParamRange>& param_idxs, string& error_msg) : ValidationError
    +ValidateQueryParams(const string& query, string& error_msg) : ValidationError
    -{static} GetPathParamIndices(const string& path) : unordered_map<string , int>
    -header_param_validators_ : unordered_map<string, HeaderParamValidator*>
    -path_param_validators_ : vector<PathParamValidatorInfo>
    -query_param_validators_ : vector<QueryParamValidatorInfo>
    +AddParamValidators(const string& path, const Value& params, vector<string>& ref_keys) : void
}
enum HttpMethod {
    CONNECT
    DELETE
    GET
    HEAD
    METHOD_COUNT
    OPTIONS
    PATCH
    POST
    PUT
    TRACE
}
enum ValidationError {
    NONE
    INVALID_BODY
    INVALID_HEADER_PARAM
    INVALID_METHOD
    INVALID_PATH_PARAM
    INVALID_QUERY_PARAM
    INVALID_ROUTE
    INVALID_RSP
}
enum ParamStyle {
    STYLE_COUNT
    STYLE_DEEP_OBJ
    STYLE_FORM
    STYLE_LABEL
    STYLE_MATRIX
    STYLE_PIPE_DELIM
    STYLE_SIMPLE
    STYLE_SPACE_DELIM
}


enum ParamType {
    TYPE_ARRAY_PRIMITIVE
    TYPE_ARRAY_STRING
    TYPE_COUNT
    TYPE_OBJECT
    TYPE_PRIMITIVE
    TYPE_STRING
}

abstract class BaseValidator {
    +BaseValidator(ValidationError err_code)
    +BaseValidator(const vector<string>& ref_keys, ValidationError err_code)
    +~BaseValidator()
    +{abstract} Validate(const string& content, string& err_msg) : ValidationError
    #code_on_error_ : ValidationError
    -{static} kErrHeaders : static const unordered_map<ValidationError, string>
    #err_header_ : string
    #InitErrHeader() : void
}

class JsonValidator {
    +JsonValidator(const Value& schema_val, const vector<string>& ref_keys, ValidationError err_code)
    +~JsonValidator()
    +Validate(const string& json_str, string& error_msg) : ValidationError
    -schema_ : SchemaDocument*
    -validator_ : SchemaValidator*
    -{static} GetString(const GenericValue<UTF8<>, CrtAllocator>& val) : string
    -CreateErrorMessages(const GenericValue<UTF8<>, CrtAllocator>& errors, const string& context, string& error_msg, bool recursive) : void
    -HandleError(const char* error_name, const GenericValue<UTF8<>, CrtAllocator>& error, const string& context, string& error_msg, bool recursive) : void
}

class MethodValidator {
    +MethodValidator()
    +Validate(const string& method, string& err_msg) : ValidationError
    -{static} kValidMethods : static const unordered_set<string>
}

class BodyValidator {
    +BodyValidator(const Value& schema_val, const vector<string>& ref_keys)
}

class ParamValidator {
    +ParamValidator(ParamInfo param_info, const vector<string>& keys, ValidationError err_code)
    +~ParamValidator()
    #{static} GetParamInfo(const Value& param_val, const string& default_style, bool default_explode, bool default_required) : ParamInfo
    +ErrorOnMissing(string& error_msg) : ValidationError {query}
    +Validate(const char* beg, const char* end, string& error_msg) : ValidationError
    +IsRequired() : bool {query}
    -required_ : const bool
    -name_ : const string
    -kv_map_ : const unordered_map<string, ParamType>
    -deserializer_ : function<string ( const char* beg, const char* const end, const unordered_map<string, ParamType>& mapper )>
    -{static} kDeserializers : function<string ( const char* beg, const char* const end, const unordered_map<string, ParamType>& mapper )>
    -{static} kParamStyleMap : static const unordered_map<string, ParamStyle>
    -{static} kParamTypeMap : static const unordered_map<string, ParamType>
}

class PathParamValidator {
    +PathParamValidator(const Value& param_val, const vector<string>& keys)
    +~PathParamValidator()
}

class QueryParamValidator {
    +QueryParamValidator(const Value& param_val, const vector<string>& keys)
    +~QueryParamValidator()
    +IsEmptyAllowed() : bool {query}
    -empty_allowed_ : bool
}
class HeaderParamValidator {
    +HeaderParamValidator(const Value& param_val, const vector<string>& keys)
    +~HeaderParamValidator()
}

BaseValidator <|-- JsonValidator
JsonValidator <|-- BodyValidator
JsonValidator <|-- ParamValidator
ParamValidator <|-- PathParamValidator
ParamValidator <|-- QueryParamValidator
ParamValidator <|-- HeaderParamValidator
BaseValidator <|-- MethodValidator

OASValidator o-- OASValidatorImp
OASValidatorImp o-- MethodValidator
OASValidatorImp o-- HttpMethod
OASValidatorImp o-- OASValidatorException
OASValidatorImp o-- ValidatorsStore
OASValidatorImp o-- PathTrie
ValidatorsStore o-- BodyValidator
ValidatorsStore o-- PathParamValidator
ValidatorsStore o-- QueryParamValidator
ValidatorsStore o-- HeaderParamValidator
ParamValidator o-- ParamType
ParamValidator o-- ParamStyle
BaseValidator o-- ValidationError

' Layout manipulation
OASValidator -[hidden]-> PathTrie
JsonValidator -[hidden]-> OASValidatorImp
OASValidator -[hidden]-> HttpMethod
OASValidator -[hidden]-> OASValidatorException
OASValidator -[hidden]-> BaseValidator
BaseValidator -[hidden]-> MethodValidator
MethodValidator -[hidden]-> JsonValidator

JsonValidator -[hidden]-> BodyValidator
BodyValidator -[hidden]-> ParamValidator
ParamValidator -[hidden]-> PathParamValidator
PathParamValidator -[hidden]-> QueryParamValidator
PathTrie -[hidden]-> ValidatorsStore

@enduml