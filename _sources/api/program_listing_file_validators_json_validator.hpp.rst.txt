
.. _program_listing_file_validators_json_validator.hpp:

Program Listing for File json_validator.hpp
===========================================

|exhale_lsh| :ref:`Return to documentation for file <file_validators_json_validator.hpp>` (``validators/json_validator.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    * Copyright (c) 2023 Muhammad Nawaz
    * Licensed under the MIT License. See LICENSE file for more information.
    */
   
   #ifndef JSON_VALIDATOR_HPP
   #define JSON_VALIDATOR_HPP
   
   #include "validators/base_validator.hpp"
   
   #include <mutex>
   #include <rapidjson/schema.h>
   
   class JsonValidator: public BaseValidator
   {
   private:
       rapidjson::SchemaDocument* schema_ = nullptr;
       rapidjson::SchemaValidator* validator_ = nullptr;
       std::mutex mutex_;
   
       void CreateErrorMessages(const rapidjson::GenericValue<rapidjson::UTF8<>, rapidjson::CrtAllocator>& errors, const std::string& context, std::string& error_msg,
                                bool recursive = false);
       void HandleError(const char* error_name, const rapidjson::GenericValue<rapidjson::UTF8<>, rapidjson::CrtAllocator>& error, const std::string& context, std::string& error_msg,
                        bool recursive);
       static std::string GetString(const rapidjson::GenericValue<rapidjson::UTF8<>, rapidjson::CrtAllocator>& val);
   
   public:
       JsonValidator(const rapidjson::Value& schema_val, const std::vector<std::string>& ref_keys, ValidationError err_code);
       ValidationError ValidateJson(const std::string& json_str, std::string& error_msg) override;
       ~JsonValidator() override;
   };
   
   #endif // JSON_VALIDATOR_HPP
